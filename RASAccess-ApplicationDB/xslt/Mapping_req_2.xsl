<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/Mapping_req_2.map" md5sum="bb4dfba2ef6a660c8f5420f44061ad29" version="8.0.501" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM Graphical Data Mapping Editor.
*   Version 8.0.5.0
*
*   Mapping file:		Mapping_req_2.map
*   Map declaration(s):	Mapping_req_2
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FTicketDomain-v1.0.0%252FHandleGeneral%257DsaveExceptionRequestMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FTicketDomain-v1.0.0%252FHandleGeneral%257DsaveExceptionResponseMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io7="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io9="wsdl.http://TicketDomain-v1.0.0/HandleGeneral"
    xmlns:io8="http://RACASBO"
    xmlns:io="http://www.w3.org/2005/08/addressing"
    xmlns:io3="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io5="http://TicketDomain-v1.0.0/HandleGeneral"
    xmlns:io4="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:map="http://RASAccess-ApplicationDB/xslt/Mapping_req_2"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="date str exsl set math map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io9:saveExceptionResponseMsg'"/>
            </xsl:attribute>
            <xsl:call-template name="map:Mapping_req_22">
              <xsl:with-param name="body" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="body" mode="map:Mapping_req_2">
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:Mapping_req_2">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'io9:saveExceptionResponseMsg'"/>
      </xsl:attribute>
      <io5:saveExceptionResponse>
        <output>
          <!-- a simple data mapping: "io5:saveException/exception/io8:ticket_id"(double) to "io8:ticket_id"(double) -->
          <xsl:if test="io5:saveException/exception/io8:ticket_id">
            <xsl:element name="io8:ticket_id">
              <xsl:value-of select="io5:saveException/exception/io8:ticket_id"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "io5:saveException/exception/io8:step"(string) to "io8:step"(string) -->
          <xsl:if test="io5:saveException/exception/io8:step">
            <xsl:element name="io8:step">
              <xsl:value-of select="io5:saveException/exception/io8:step"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "io5:saveException/exception/io8:service"(string) to "io8:service"(string) -->
          <xsl:if test="io5:saveException/exception/io8:service">
            <xsl:element name="io8:service">
              <xsl:value-of select="io5:saveException/exception/io8:service"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "io5:saveException/exception/io8:error_code"(string) to "io8:error_code"(string) -->
          <xsl:if test="io5:saveException/exception/io8:error_code">
            <xsl:element name="io8:error_code">
              <xsl:value-of select="io5:saveException/exception/io8:error_code"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "io5:saveException/exception/io8:error_data"(string) to "io8:error_data"(string) -->
          <xsl:if test="io5:saveException/exception/io8:error_data">
            <xsl:element name="io8:error_data">
              <xsl:value-of select="io5:saveException/exception/io8:error_data"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "io5:saveException/exception/io8:completed_by"(string) to "io8:completed_by"(string) -->
          <xsl:if test="io5:saveException/exception/io8:completed_by">
            <xsl:element name="io8:completed_by">
              <xsl:value-of select="io5:saveException/exception/io8:completed_by"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "io5:saveException/exception/io8:completed_on"(dateTime) to "io8:completed_on"(dateTime) -->
          <xsl:if test="io5:saveException/exception/io8:completed_on">
            <xsl:element name="io8:completed_on">
              <xsl:value-of select="io5:saveException/exception/io8:completed_on"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "io5:saveException/exception/io8:id"(double) to "io8:id"(double) -->
          <xsl:if test="io5:saveException/exception/io8:id">
            <xsl:element name="io8:id">
              <xsl:value-of select="io5:saveException/exception/io8:id"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "io5:saveException/exception/io8:request"(string) to "io8:request"(string) -->
          <xsl:if test="io5:saveException/exception/io8:request">
            <xsl:element name="io8:request">
              <xsl:value-of select="io5:saveException/exception/io8:request"/>
            </xsl:element>
          </xsl:if>
        </output>
      </io5:saveExceptionResponse>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:Mapping_req_22">
    <xsl:param name="body"/>
    <io5:saveExceptionResponse>
      <output>
        <!-- a simple data mapping: "$body/io5:saveException/exception/io8:ticket_id"(double) to "io8:ticket_id"(double) -->
        <xsl:if test="$body/io5:saveException/exception/io8:ticket_id">
          <xsl:element name="io8:ticket_id">
            <xsl:value-of select="$body/io5:saveException/exception/io8:ticket_id"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "$body/io5:saveException/exception/io8:step"(string) to "io8:step"(string) -->
        <xsl:if test="$body/io5:saveException/exception/io8:step">
          <xsl:element name="io8:step">
            <xsl:value-of select="$body/io5:saveException/exception/io8:step"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "$body/io5:saveException/exception/io8:service"(string) to "io8:service"(string) -->
        <xsl:if test="$body/io5:saveException/exception/io8:service">
          <xsl:element name="io8:service">
            <xsl:value-of select="$body/io5:saveException/exception/io8:service"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "$body/io5:saveException/exception/io8:error_code"(string) to "io8:error_code"(string) -->
        <xsl:if test="$body/io5:saveException/exception/io8:error_code">
          <xsl:element name="io8:error_code">
            <xsl:value-of select="$body/io5:saveException/exception/io8:error_code"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "$body/io5:saveException/exception/io8:error_data"(string) to "io8:error_data"(string) -->
        <xsl:if test="$body/io5:saveException/exception/io8:error_data">
          <xsl:element name="io8:error_data">
            <xsl:value-of select="$body/io5:saveException/exception/io8:error_data"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "$body/io5:saveException/exception/io8:completed_by"(string) to "io8:completed_by"(string) -->
        <xsl:if test="$body/io5:saveException/exception/io8:completed_by">
          <xsl:element name="io8:completed_by">
            <xsl:value-of select="$body/io5:saveException/exception/io8:completed_by"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "$body/io5:saveException/exception/io8:completed_on"(dateTime) to "io8:completed_on"(dateTime) -->
        <xsl:if test="$body/io5:saveException/exception/io8:completed_on">
          <xsl:element name="io8:completed_on">
            <xsl:value-of select="$body/io5:saveException/exception/io8:completed_on"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "$body/io5:saveException/exception/io8:id"(double) to "io8:id"(double) -->
        <xsl:if test="$body/io5:saveException/exception/io8:id">
          <xsl:element name="io8:id">
            <xsl:value-of select="$body/io5:saveException/exception/io8:id"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "$body/io5:saveException/exception/io8:request"(string) to "io8:request"(string) -->
        <xsl:if test="$body/io5:saveException/exception/io8:request">
          <xsl:element name="io8:request">
            <xsl:value-of select="$body/io5:saveException/exception/io8:request"/>
          </xsl:element>
        </xsl:if>
      </output>
    </io5:saveExceptionResponse>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
